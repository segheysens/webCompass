{"version":3,"sources":["compass.js"],"names":["undefined","defined","variable","fire","type","args","callbacks","self","_callbacks","i","length","apply","window","average5","array","sum","Compass","method","watch","callback","id","_lastId","init","_watchers","_nav","compass","watchHeading","watcher","e","webkitCompassHeading","_win","addEventListener","degrees","alpha","_gpsDiff","unwatch","m","clearWatch","removeEventListener","needGPS","push","needMove","noSupport","_initing","_start","DeviceOrientationEvent","_checking","_checkEvent","setTimeout","navigator","wait","geolocation","_gpsHack","first","alphas","headings","saveAlpha","success","watchPosition","position","coords","heading","speed","enableHighAccuracy"],"mappings":";CAAA,SAAUA,GAAW,aAIfC,IAAAA,EAAU,SAAUC,GACdA,OAAY,MAAZA,GALZ,MAKgCA,GAI1BC,EAAO,SAAUC,EAAMC,GAEpB,IADDC,IAAAA,EAAYC,EAAKC,WAAWJ,GACvBK,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpCH,EAAUG,GAAGE,MAAMC,OAAQP,IAK3BQ,EAAW,SAAUC,GAElB,IADDC,IAAAA,EAAM,EACDN,EAAIK,EAAMJ,OAAS,EAAGD,EAAIK,EAAMJ,OAAS,EAAGD,IACnDM,GAAOD,EAAML,GAERM,OAAAA,EAAM,GA4BXR,EAAOK,OAAOI,QAAU,CAiB1BC,YAnEJ,EAmFIC,MAAO,SAAUC,GACXC,IAAAA,IAAOb,EAAKc,QA+BTD,OA7BPb,EAAKe,KAAK,SAAUL,GAEbA,GAAU,YAAVA,EACHV,EAAKgB,UAAUH,GAAMb,EAAKiB,KAAKC,QAAQC,aAAaP,QAE/C,GAAe,qBAAVF,EAAgC,CACtCU,IAAAA,EAAU,SAAUC,GACtBT,EAASS,EAAEC,uBAEbtB,EAAKuB,KAAKC,iBAAiB,oBAAqBJ,GAChDpB,EAAKgB,UAAUH,GAAMO,OAEhB,GAAe,qBAAVV,EAAgC,CACtCe,IAAAA,EACAL,EAAU,SAAUC,IACtBI,GAAWJ,EAAEK,MAAQ1B,EAAK2B,UACX,EACbF,GAAW,IACDA,EAAU,MACpBA,GAAW,KAEbb,EAASa,IAEXzB,EAAKuB,KAAKC,iBAAiB,oBAAqBJ,GAChDpB,EAAKgB,UAAUH,GAAMO,KAKlBP,GAMTe,QAAS,SAAUf,GAaVb,OAZPA,EAAKe,KAAK,SAAUc,GAER,YAALA,EACH7B,EAAKiB,KAAKC,QAAQY,WAAW9B,EAAKgB,UAAUH,IAE7B,qBAALgB,GAAiC,qBAALA,GACtC7B,EAAKuB,KAAKQ,oBACR,oBAAqB/B,EAAKgB,UAAUH,WAGjCb,EAAKgB,UAAUH,KAEjBb,GAgBTgC,QAAS,SAAUpB,GAEVZ,OADPA,EAAKC,WAAW+B,QAAQC,KAAKrB,GACtBZ,GAoBTkC,SAAU,SAAUtB,GAEXZ,OADPA,EAAKC,WAAWiC,SAASD,KAAKrB,GACvBZ,GAWTmC,UAAW,SAAUvB,GAMZZ,OALc,IAAhBA,EAAKU,OACRE,IACWlB,EAAQM,EAAKU,SACxBV,EAAKC,WAAWkC,UAAUF,KAAKrB,GAE1BZ,GAYTe,KAAM,SAAUH,GACTlB,GAAAA,EAAQM,EAAKU,QAChBE,EAASZ,EAAKU,aAKXV,GAFLA,EAAKC,WAAWc,KAAKkB,KAAKrB,IAErBZ,EAAKoC,SAoBHpC,OAjBPA,EAAKoC,UAAW,EAEXpC,EAAKiB,KAAKC,QACblB,EAAKqC,OAAO,YAEFrC,EAAKuB,KAAKe,wBACpBtC,EAAKuC,UAAY,EACjBvC,EAAKuB,KAAKC,iBAAiB,oBAAqBxB,EAAKwC,aACrDC,WAAW,YACe,IAAnBzC,EAAKuC,WACRvC,EAAKqC,QAAO,IAEb,MAGHrC,EAAKqC,QAAO,GAEPrC,GAITc,QAAS,EAGTE,UAAW,GAGXO,KAAMlB,OAGNY,KAAMyB,UAGNzC,WAAY,CAGVc,KAAM,GAGNoB,UAAW,GAGXH,QAAS,GAGTE,SAAU,IAKZE,UAAU,EAGVT,cA1QJ,EA6QIU,OAAQ,SAAU3B,GAChBV,EAAKU,OAAWA,EAChBV,EAAKoC,UAAW,EAEhBxC,EAAK,OAAQ,CAACc,IACdV,EAAKC,WAAWc,KAAO,IAEP,IAAXL,GACHd,EAAK,YAAa,IAEpBI,EAAKC,WAAWkC,UAAY,IAI9BI,WAAW,EAGXC,YAAa,SAAUnB,GACrBrB,EAAKuC,WAAa,EACdI,IAAAA,GAAO,EAENjD,EAAQ2B,EAAEC,sBACbtB,EAAKqC,OAAO,qBAEF3C,EAAQ2B,EAAEK,QAAU1B,EAAKiB,KAAK2B,YACxC5C,EAAK6C,WAEK7C,EAAKuC,UAAY,EAC3BvC,EAAKqC,QAAO,GAGZM,GAAO,EAGHA,IACJ3C,EAAKuC,WAAY,EACjBvC,EAAKuB,KAAKQ,oBAAoB,oBAAqB/B,EAAKwC,eAK5DK,SAAU,WACJC,IAAAA,GAAW,EACXC,EAAW,GACXC,EAAW,GAEfpD,EAAK,WAEDqD,IAAAA,EAAY,SAAU5B,GACxB0B,EAAOd,KAAKZ,EAAEK,QAEhB1B,EAAKuB,KAAKC,iBAAiB,oBAAqByB,GAE5CC,IA6BA9B,EAAUpB,EAAKiB,KAAK2B,YACtBO,cA9BY,SAAUC,GAClBC,IAAAA,EAASD,EAASC,OAChB3D,EAAQ2D,EAAOC,WAIhBR,IACHA,GAAQ,EACRlD,EAAK,aAGFyD,EAAOE,MAAQ,GAClBP,EAASf,KAAKoB,EAAOC,SAChBN,EAAS7C,QAAU,GAAK4C,EAAO5C,QAAU,IAC5CH,EAAKuB,KAAKQ,oBAAoB,oBAAqBkB,GACnDjD,EAAKiB,KAAK2B,YAAYd,WAAWV,GAEjCpB,EAAK2B,SAAWrB,EAAS0C,GAAY1C,EAASyC,GAC9C/C,EAAKqC,OAAO,uBAGdW,EAAW,KAGH,WACVhD,EAAKuB,KAAKQ,oBAAoB,oBAAqBkB,GACnDjD,EAAKqC,QAAO,IAIkB,CAAEmB,oBAAoB,MAhW5D","file":"compass.9c5cd3be.map","sourceRoot":"..","sourcesContent":["(function(undefined) {\n  \"use strict\";\n\n  // Shortcut to check, that `variable` is not `undefined` or `null`.\n  var defined = function (variable) {\n    return (variable != null || variable != undefined);\n  };\n\n  // Fire `type` callbacks with `args`.\n  var fire = function (type, args) {\n    var callbacks = self._callbacks[type];\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i].apply(window, args);\n    }\n  };\n\n  // Calculate average value for last 5 `array` items;\n  var average5 = function (array) {\n    var sum = 0;\n    for (var i = array.length - 1; i > array.length - 6; i--) {\n      sum += array[i];\n    }\n    return sum / 5;\n  };\n\n  // Compass.js allow you to get compass heading in JavaScript.\n  // We can get compass data by two proprietary APIs and one hack:\n  // * PhoneGap have `navigator.compass` API.\n  // * iOS Safari add `webkitCompassHeading` to `deviceorientation` event.\n  // * We can enable GPS and ask user to go forward. GPS will send\n  //   current heading, so we can calculate difference between real North\n  //   and zero in `deviceorientation` event. Next we use this difference\n  //   to get compass heading only by device orientation.\n  //\n  // Hide compass, when there isn’t any method:\n  //\n  //   Compass.noSupport(function () {\n  //     $('.compass').hide();\n  //   });\n  //\n  // Show instructions for GPS hack:\n  //\n  //   Compass.needGPS(function () {\n  //     $('.go-outside-message').show();\n  //   }).needMove(function () {\n  //     $('.go-outside-message').hide()\n  //     $('.move-and-hold-ahead-message').show();\n  //   }).init(function () {\n  //     $('.move-and-hold-ahead-message').hide();\n  //   });\n  var self = window.Compass = {\n\n    // Name of method to get compass heading. It will have value only after\n    // library initialization from `init` method. So better way to get\n    // method name is to use `init`:\n    //\n    //   Compass.init(function (method) {\n    //     console.log('Compass by ' + method);\n    //   });\n    //\n    // Available methods:\n    // * `phonegap` take from PhoneGap’s `navigator.compass`.\n    // * `webkitOrientation` take from iPhone’s proprietary\n    //   `webkitCompassHeading` proprerty in `DeviceOrientationEvent`.\n    // * `orientationAndGPS` take from device orientation with GPS hack.\n    //\n    // If browser hasn’t access to compass, `method` will be `false`.\n    method: undefined,\n\n    // Watch for compass heading changes and execute `callback` with degrees\n    // relative to magnetic north (from 0 to 360).\n    //\n    // Method return watcher ID to use it in `unwatch`.\n    //\n    //   var watchID = Compass.watch(function (heading) {\n    //     $('.degrees').text(heading);\n    //     // Don’t forget to change degree sign, when rotate compass.\n    //     $('.compass').css({ transform: 'rotate(' + (-heading) + 'deg)' });\n    //   });\n    //\n    //   someApp.close(function () {\n    //     Compass.unwatch(watchID);\n    //   });\n    watch: function (callback) {\n      var id = ++self._lastId;\n\n      self.init(function (method) {\n\n        if ( method == 'phonegap' ) {\n          self._watchers[id] = self._nav.compass.watchHeading(callback);\n\n        } else if ( method == 'webkitOrientation' ) {\n          var watcher = function (e) {\n            callback(e.webkitCompassHeading);\n          };\n          self._win.addEventListener('deviceorientation', watcher);\n          self._watchers[id] = watcher;\n\n        } else if ( method == 'orientationAndGPS' ) {\n          var degrees;\n          var watcher = function (e) {\n            degrees = -e.alpha + self._gpsDiff;\n            if ( degrees < 0 ) {\n              degrees += 360;\n            } else if ( degrees > 360 ) {\n              degrees -= 360;\n            }\n            callback(degrees);\n          };\n          self._win.addEventListener('deviceorientation', watcher);\n          self._watchers[id] = watcher;\n\n        }\n      });\n\n      return id;\n    },\n\n    // Remove watcher by watcher ID from `watch`.\n    //\n    //   Compass.unwatch(watchID)\n    unwatch: function (id) {\n      self.init(function (m) {\n\n        if ( m == 'phonegap' ) {\n          self._nav.compass.clearWatch(self._watchers[id]);\n\n        } else if ( m == 'webkitOrientation' || m == 'orientationAndGPS' ) {\n          self._win.removeEventListener(\n            'deviceorientation', self._watchers[id]);\n\n        }\n        delete self._watchers[id];\n      });\n      return self;\n    },\n\n    // Execute `callback`, when GPS hack activated to detect difference between\n    // device orientation and real North from GPS.\n    //\n    // You need to show to user some message, that he must go outside to be able\n    // to receive GPS signal.\n    //\n    // Callback must be set before `init` or `watch` executing.\n    //\n    //   Compass.needGPS(function () {\n    //     $('.go-outside-message').show();\n    //   });\n    //\n    // Don’t forget to hide message by `needMove` callback in second step.\n    needGPS: function (callback) {\n      self._callbacks.needGPS.push(callback);\n      return self;\n    },\n\n    // Execute `callback` on second GPS hack step, when library has GPS signal,\n    // but user must move and hold the device straight ahead. Library will use\n    // `heading` from GPS movement tracking to detect difference between\n    // device orientation and real North.\n    //\n    // Callback must be set before `init` or `watch` executing.\n    //\n    //   Compass.needMove(function () {\n    //     $('.go-outside-message').hide()\n    //     $('.move-and-hold-ahead-message').show();\n    //   });\n    //\n    // Don’t forget to hide message in `init` callback:\n    //\n    //   Compass.init(function () {\n    //     $('.move-and-hold-ahead-message').hide();\n    //   });\n    needMove: function (callback) {\n      self._callbacks.needMove.push(callback);\n      return self;\n    },\n\n    // Execute `callback` if browser hasn’t any way to get compass heading.\n    //\n    //   Compass.noSupport(function () {\n    //     $('.compass').hide();\n    //   });\n    //\n    // On Firefox detecting can take about 0.5 second. So, it will be better\n    // to show compass in `init`, than to hide it in `noSupport`.\n    noSupport: function (callback) {\n      if ( self.method === false ) {\n        callback();\n      } else if ( !defined(self.method) ) {\n        self._callbacks.noSupport.push(callback);\n      }\n      return self;\n    },\n\n    // Detect compass method and execute `callback`, when library will be\n    // initialized. Callback will get method name (or `false` if library can’t\n    // detect compass) in first argument.\n    //\n    // It is best way to check `method` property.\n    //\n    //   Compass.init(function (method) {\n    //     console.log('Compass by ' + method);\n    //   });\n    init: function (callback) {\n      if ( defined(self.method) ) {\n        callback(self.method);\n        return;\n      }\n      self._callbacks.init.push(callback);\n\n      if ( self._initing ) {\n        return;\n      }\n      self._initing = true;\n\n      if ( self._nav.compass ) {\n        self._start('phonegap');\n\n      } else if ( self._win.DeviceOrientationEvent ) {\n        self._checking = 0;\n        self._win.addEventListener('deviceorientation', self._checkEvent);\n        setTimeout(function () {\n          if ( self._checking !== false ) {\n            self._start(false);\n          }\n        }, 500);\n\n      } else {\n        self._start(false);\n      }\n      return self;\n    },\n\n    // Last watch ID.\n    _lastId: 0,\n\n    // Hash of internal ID to watcher to use it in `unwatch`.\n    _watchers: { },\n\n    // Window object for testing.\n    _win: window,\n\n    // Navigator object for testing.\n    _nav: navigator,\n\n    // List of callbacks.\n    _callbacks: {\n\n      // Callbacks from `init` method.\n      init: [],\n\n      // Callbacks from `noSupport` method.\n      noSupport: [],\n\n      // Callbacks from `needGPS` method.\n      needGPS: [],\n\n      // Callbacks from `needMove` method.\n      needMove: []\n\n    },\n\n    // Is library now try to detect compass method.\n    _initing: false,\n\n    // Difference between `alpha` orientation and real North from GPS.\n    _gpsDiff: undefined,\n\n    // Finish library initialization and use `method` to get compass heading.\n    _start: function (method) {\n      self.method   = method;\n      self._initing = false;\n\n      fire('init', [method]);\n      self._callbacks.init = [];\n\n      if ( method === false ) {\n        fire('noSupport', []);\n      }\n      self._callbacks.noSupport = [];\n    },\n\n    // Tell, that we wait for `DeviceOrientationEvent`.\n    _checking: false,\n\n    // Check `DeviceOrientationEvent` to detect compass method.\n    _checkEvent: function (e) {\n      self._checking += 1;\n      var wait = false;\n\n      if ( defined(e.webkitCompassHeading) ) {\n        self._start('webkitOrientation');\n\n      } else if ( defined(e.alpha) && self._nav.geolocation ) {\n        self._gpsHack();\n\n      } else if ( self._checking > 1 ) {\n        self._start(false);\n\n      } else {\n        wait = true;\n      }\n\n      if ( !wait ) {\n        self._checking = false;\n        self._win.removeEventListener('deviceorientation', self._checkEvent);\n      }\n    },\n\n    // Use GPS to detect difference  between `alpha` orientation and real North.\n    _gpsHack: function () {\n      var first    = true;\n      var alphas   = [];\n      var headings = [];\n\n      fire('needGPS');\n\n      var saveAlpha = function (e) {\n        alphas.push(e.alpha);\n      }\n      self._win.addEventListener('deviceorientation', saveAlpha);\n\n      var success = function (position) {\n        var coords = position.coords\n        if ( !defined(coords.heading) ) {\n          return; // Position not from GPS\n        }\n\n        if ( first ) {\n          first = false;\n          fire('needMove');\n        }\n\n        if ( coords.speed > 1 ) {\n          headings.push(coords.heading);\n          if ( headings.length >= 5 && alphas.length >= 5 ) {\n            self._win.removeEventListener('deviceorientation', saveAlpha);\n            self._nav.geolocation.clearWatch(watcher);\n\n            self._gpsDiff = average5(headings) + average5(alphas);\n            self._start('orientationAndGPS');\n          }\n        } else {\n          headings = [];\n        }\n      };\n      var error = function () {\n        self._win.removeEventListener('deviceorientation', saveAlpha);\n        self._start(false);\n      };\n\n      var watcher = self._nav.geolocation.\n        watchPosition(success, error, { enableHighAccuracy: true });\n    }\n\n  };\n\n})();\n"]}